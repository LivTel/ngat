package ngat.phase2;
import ngat.phase2.nonpersist.*;

import com.odi.*;
import com.odi.util.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class IRCamConfig extends InstrumentConfig implements Serializable {
    
    /** Serial version UID - used to maintain serialization compatibility
     * across modifications of the class's structure.*/
    private static final long serialVersionUID = -1885321170923597100L;
     
    public static final int maxDetectorCount = 1;

    // Variables.

    /** no comment. */
    protected String upperFilterWheel;
    
    /** no comment. */
    protected String lowerFilterWheel;
    
    // Constructor.
    
    public IRCamConfig() {this("untitled");}
    
    public IRCamConfig(String name) {
	super(name);
	detectors = new IRCamDetector[1];
	detectors[0] = new IRCamDetector();
    }

    // Accessors.
    
    /** Sets the no comment .*/
    public void setUpperFilterWheel(String in) { this.upperFilterWheel = in;}   
    
    /** Returns the no comment. */
    public String getUpperFilterWheel() { return upperFilterWheel;}
        
    /** Sets the no comment .*/
    public void setLowerFilterWheel(String in) { this.lowerFilterWheel = in;}
    
    /** Returns the no comment. */
    public String getLowerFilterWheel() { return lowerFilterWheel;}

    public int getMaxDetectorCount() { return maxDetectorCount; }
   
    // NP -> P Translator.
    public IRCamConfig(NPIRCamConfig npIRCamConfig) {
	super(npIRCamConfig);
	Iterator it;
	upperFilterWheel = npIRCamConfig.getUpperFilterWheel();
	lowerFilterWheel = npIRCamConfig.getLowerFilterWheel();
	detectors[0] = new CCDDetector(npIRCamConfig.getDetector(0));	
     } // end (NP -> P Translator).
     
    // P -> NP Translator.
    public void stuff(NPIRCamConfig npIRCamConfig) {
	super.stuff(npIRCamConfig);
	npIRCamConfig.setUpperFilterWheel(getUpperFilterWheel());
	npIRCamConfig.setLowerFilterWheel(getLowerFilterWheel());
	try {
	    npIRCamConfig.setNPDetector(0, (NPIRCamDetector)(detectors[0].makeNP()));
	} catch (IllegalArgumentException iae) {	    
	}
    } // end (P -> NP Translator).
    
    // P -> NP Translator.
    public NPDBObject makeNP() {
	NPIRCamConfig npIRCamConfig = new NPIRCamConfig();
	stuff(npIRCamConfig);
	return npIRCamConfig;
    } // end (makeNp).
    
} // end class def [IRCamConfig].
