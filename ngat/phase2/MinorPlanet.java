package ngat.phase2;

import ngat.astrometry.*;
import ngat.phase2.nonpersist.*;

import com.odi.*;
import com.odi.util.*;

import java.util.*;
import java.io.*;


// Generated by O3J 


public class MinorPlanet extends SolarSystemSource implements Serializable {

    // Variables.

    /** Epoch at which the elements are/were measured (mjd).*/
    protected double elementEpoch;
    
    /** Longitude of the ascending node (rads). */
    protected double longAscNode;

    /** Argument of perihelion (rads). */
    protected double argPeri;
    
    /** Inclination of the orbit to ecliptic (rads). */
    protected double orbitalInc;
    
    /** Eccentricity of orbit ( =1, circle, <1, >1,  ). */
    protected double eccentricity;
    
    /** Mean anomaly at epoch (rads). */
    protected double meanAnomaly;
    
    /** Mean distance (orbital radius), (au). */
    protected double meanDistance;
    
    /** Cache RA locally. */
    private double cacheRA;
    
    /** Cache Dec locally. */
    private double cacheDec;
    
    /** The last time at which currently cached values can be relied on.*/
    protected long cacheExpiry;
    
    
    // Constructor.
    
    public MinorPlanet() {super();}
    
    public MinorPlanet(String name) {
	super(name);
    }
    
    // Accessors.
    public double getElementEpoch() { return elementEpoch;}
    public double getLongAscNode() { return longAscNode;}
    public double getArgPeri() { return argPeri;}
   
    public double getOrbitalInc() { return orbitalInc;}
    public double getEccentricity() { return eccentricity;}
    public double getMeanAnomaly() { return meanAnomaly;}
    public double getMeanDistance() { return meanDistance;}
   
    // Mutators.
    public void setElementEpoch(double in) { elementEpoch = in;}
    public void setLongAscNode(double in) { longAscNode = in;}
    public void setArgPeri(double in) {  argPeri = in;}
   
    public void setOrbitalInc(double in) {  orbitalInc = in;}
    public void setEccentricity(double in) { eccentricity = in;}
    public void setMeanAnomaly(double in) {  meanAnomaly = in;}
    public void setMeanDistance(double in) {  meanDistance = in;}
    
    /** Returns the source's current position. This is calculated using
     * the orbital elements and obtained via ngat.astrometry.Astrometry*/
    public Position getPosition() { 	
	Position position = Astrometry.getPlanetPosition(this);
	return position;
    }
    
    /** Returns the current Non-sidereal tracking in RA.*/
    public double getNsTrackRA() { return 0.0;}
    
    /** Returns the current Non-sidereal tracking in dec.*/
    public double getNsTrackDec() { return 0.0;}
    
    // NP -> P Translator.  
    public MinorPlanet(NPMinorPlanet npMinorPlanet) {
	super(npMinorPlanet);
	Iterator it;
	elementEpoch = npMinorPlanet.getElementEpoch();
	longAscNode  = npMinorPlanet.getLongAscNode();
	argPeri      = npMinorPlanet.getArgPeri();
	orbitalInc   = npMinorPlanet.getOrbitalInc();
	eccentricity = npMinorPlanet.getEccentricity();
	meanAnomaly  = npMinorPlanet.getMeanAnomaly();
	meanDistance = npMinorPlanet.getMeanDistance();
    } // end (NP -> P Translator).
    
    // P -> NP Translator.   
    public void stuff(NPMinorPlanet npMinorPlanet) {
	super.stuff(npMinorPlanet);
	npMinorPlanet.setElementEpoch(elementEpoch);
	npMinorPlanet.setLongAscNode(longAscNode);
	npMinorPlanet.setArgPeri(argPeri);
	npMinorPlanet.setOrbitalInc(orbitalInc);
	npMinorPlanet.setEccentricity(eccentricity);
	npMinorPlanet.setMeanAnomaly(meanAnomaly);
	npMinorPlanet.setMeanDistance(meanDistance);
    } // end (P -> NP Translator).
    
    // P -> NP Translator.
    
    public NPDBObject makeNP() {
	NPMinorPlanet npMinorPlanet = new NPMinorPlanet();
	stuff(npMinorPlanet);
	return npMinorPlanet;
    } // end (makeNp).
    
    
} // end class def [MinorPlanet].
