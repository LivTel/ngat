package ngat.phase2;
import ngat.phase2.nonpersist.*;

import jyd.storable.*;
import jyd.collection.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class PipelineConfig extends NPDBObject implements Serializable {
 
    /** Serial version UID - used to maintain serialization compatibility
     * across modifications of the class's structure.*/
    private static final long serialVersionUID = -7617261362059399044L;
    
	// Variables.

    /** text description. */
    protected String description;

     /** no comment. */
     protected boolean debias;


     /** no comment. */
     protected boolean flatfield;


     /** no comment. */
     protected boolean idCosmic;


     /** no comment. */
     protected boolean removeCosmic;


     /** no comment. */
     protected boolean astroCalib;


     /** no comment. */
     protected boolean frameZero;


     /** no comment. */
     protected boolean photometry;


     /** no comment. */
     protected boolean relativePhotometry;


     /** no comment. */
     protected boolean astrometry;

     // Constructor.

     public PipelineConfig() {this("untitled");}

     public PipelineConfig(String name) {
          super(name);
     }

     // Accessors.

    /** Sets the etx description.*/
    public void setDescription(String in) {  this.description = in;}

    /** Returns the text description. */
    public String getDescription() {  return description;}

     /** Sets the no comment .*/
     public void setDebias(boolean in) {  this.debias = in;}


     /** True if no comment. */
     public boolean isDebias() {  return debias;}


     /** Sets the no comment .*/
     public void setFlatfield(boolean in) {  this.flatfield = in;}


     /** True if no comment. */
     public boolean isFlatfield() {  return flatfield;}


     /** Sets the no comment .*/
     public void setIdCosmic(boolean in) {  this.idCosmic = in;}


     /** True if no comment. */
     public boolean isIdCosmic() {  return idCosmic;}


     /** Sets the no comment .*/
     public void setRemoveCosmic(boolean in) {  this.removeCosmic = in;}


     /** True if no comment. */
     public boolean isRemoveCosmic() {  return removeCosmic;}


     /** Sets the no comment .*/
     public void setAstroCalib(boolean in) {  this.astroCalib = in;}


     /** True if no comment. */
     public boolean isAstroCalib() {  return astroCalib;}


     /** Sets the no comment .*/
     public void setFrameZero(boolean in) {  this.frameZero = in;}


     /** True if no comment. */
     public boolean isFrameZero() {  return frameZero;}


     /** Sets the no comment .*/
     public void setPhotometry(boolean in) {  this.photometry = in;}


     /** True if no comment. */
     public boolean isPhotometry() {  return photometry;}


     /** Sets the no comment .*/
     public void setRelativePhotometry(boolean in) {  this.relativePhotometry = in;}


     /** True if no comment. */
     public boolean isRelativePhotometry() {  return relativePhotometry;}


     /** Sets the no comment .*/
     public void setAstrometry(boolean in) {  this.astrometry = in;}


     /** True if no comment. */
     public boolean isAstrometry() { return astrometry;}

    public double getReconfigurationTime(PipelineConfig other) {  return 5.0;}
    
    public void writeXml(PrintStream out, int level) {
          super.writeXml(out, level);
          Iterator it;
	  out.println(tab(level+1)+"<description>"+description+"</description>");
          out.println(tab(level+1)+"<debias>"+debias+"</debias>");
          out.println(tab(level+1)+"<flatfield>"+flatfield+"</flatfield>");
          out.println(tab(level+1)+"<idCosmic>"+idCosmic+"</idCosmic>");
          out.println(tab(level+1)+"<removeCosmic>"+removeCosmic+"</removeCosmic>");
          out.println(tab(level+1)+"<astroCalib>"+astroCalib+"</astroCalib>");
          out.println(tab(level+1)+"<frameZero>"+frameZero+"</frameZero>");
          out.println(tab(level+1)+"<photometry>"+photometry+"</photometry>");
          out.println(tab(level+1)+"<relativePhotometry>"+relativePhotometry+"</relativePhotometry>");
          out.println(tab(level+1)+"<astrometry>"+astrometry+"</astrometry>");
	  out.println(tab(level)+"</PipelineConfig>");
     } // end (write)

    /** Clone Constructor.*/
     public NPDBObject copy() {
          try {
               return (PipelineConfig)clone();
          } catch (CloneNotSupportedException ce) {return null;}
     } // end (copy).

} // end class def [PipelineConfig].
