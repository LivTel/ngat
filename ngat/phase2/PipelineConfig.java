package ngat.phase2;
import ngat.phase2.nonpersist.*;

import com.odi.*;
import com.odi.util.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class PipelineConfig extends DBObject implements Serializable {

     // Variables.

    /** text description. */
    protected String description;

     /** no comment. */
     protected boolean debias;


     /** no comment. */
     protected boolean flatfield;


     /** no comment. */
     protected boolean idCosmic;


     /** no comment. */
     protected boolean removeCosmic;


     /** no comment. */
     protected boolean astroCalib;


     /** no comment. */
     protected boolean frameZero;


     /** no comment. */
     protected boolean photometry;


     /** no comment. */
     protected boolean relativePhotometry;


     /** no comment. */
     protected boolean astrometry;

     // Constructor.

     public PipelineConfig() {this("untitled");}

     public PipelineConfig(String name) {
          super(name);
     }

     // Accessors.

    /** Sets the etx description.*/
    public void setDescription(String in) { this.description = in;}

    /** Returns the text description. */
    public String getDescription() { return description;}

     /** Sets the no comment .*/
     public void setDebias(boolean in) { this.debias = in;}


     /** True if no comment. */
     public boolean isDebias() { return debias;}


     /** Sets the no comment .*/
     public void setFlatfield(boolean in) { this.flatfield = in;}


     /** True if no comment. */
     public boolean isFlatfield() { return flatfield;}


     /** Sets the no comment .*/
     public void setIdCosmic(boolean in) { this.idCosmic = in;}


     /** True if no comment. */
     public boolean isIdCosmic() { return idCosmic;}


     /** Sets the no comment .*/
     public void setRemoveCosmic(boolean in) { this.removeCosmic = in;}


     /** True if no comment. */
     public boolean isRemoveCosmic() { return removeCosmic;}


     /** Sets the no comment .*/
     public void setAstroCalib(boolean in) { this.astroCalib = in;}


     /** True if no comment. */
     public boolean isAstroCalib() { return astroCalib;}


     /** Sets the no comment .*/
     public void setFrameZero(boolean in) { this.frameZero = in;}


     /** True if no comment. */
     public boolean isFrameZero() { return frameZero;}


     /** Sets the no comment .*/
     public void setPhotometry(boolean in) { this.photometry = in;}


     /** True if no comment. */
     public boolean isPhotometry() { return photometry;}


     /** Sets the no comment .*/
     public void setRelativePhotometry(boolean in) { this.relativePhotometry = in;}


     /** True if no comment. */
     public boolean isRelativePhotometry() { return relativePhotometry;}


     /** Sets the no comment .*/
     public void setAstrometry(boolean in) { this.astrometry = in;}


     /** True if no comment. */
     public boolean isAstrometry() { return astrometry;}

    public double getReconfigurationTime(PipelineConfig other) { return 5.0;}

     // Descendant Mutators.

     
     // NP -> P Translator.

     public PipelineConfig(NPPipelineConfig npPipelineConfig) {
          super(npPipelineConfig);
          Iterator it; 
	  description = npPipelineConfig.getDescription();
          debias = npPipelineConfig.isDebias();
          flatfield = npPipelineConfig.isFlatfield();
          idCosmic = npPipelineConfig.isIdCosmic();
          removeCosmic = npPipelineConfig.isRemoveCosmic();
          astroCalib = npPipelineConfig.isAstroCalib();
          frameZero = npPipelineConfig.isFrameZero();
          photometry = npPipelineConfig.isPhotometry();
          relativePhotometry = npPipelineConfig.isRelativePhotometry();
          astrometry = npPipelineConfig.isAstrometry();
          
          // Recursively call Daughter Translators.

     } // end (NP -> P Translator).
     
     // P -> NP Translator.

     public void stuff(NPPipelineConfig npPipelineConfig) {
          super.stuff(npPipelineConfig);
          Iterator it; 
	  npPipelineConfig.setDescription(getDescription());
          npPipelineConfig.setDebias(isDebias());
          npPipelineConfig.setFlatfield(isFlatfield());
          npPipelineConfig.setIdCosmic(isIdCosmic());
          npPipelineConfig.setRemoveCosmic(isRemoveCosmic());
          npPipelineConfig.setAstroCalib(isAstroCalib());
          npPipelineConfig.setFrameZero(isFrameZero());
          npPipelineConfig.setPhotometry(isPhotometry());
          npPipelineConfig.setRelativePhotometry(isRelativePhotometry());
          npPipelineConfig.setAstrometry(isAstrometry());
     } // end (P -> NP Translator).
     
     // P -> NP Translator.

     public NPDBObject makeNP() {
          NPPipelineConfig npPipelineConfig = new NPPipelineConfig();
          stuff(npPipelineConfig);
          return npPipelineConfig;
     } // end (makeNp).


} // end class def [PipelineConfig].
