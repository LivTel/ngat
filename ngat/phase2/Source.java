package ngat.phase2;
import ngat.phase2.nonpersist.*;

import com.odi.*;
import com.odi.util.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class Source extends DBObject implements Serializable {

     // Variables.



     /**  whether the source is fixed. */
     protected boolean fixed;


     /** no comment. */
     protected Position position;

     // Constructor.

     public Source() {this("untitled");}

     public Source(String name) {
          super(name);
     }

     // Accessors.



     /** Sets the  whether the source is fixed .*/
     public void setFixed(boolean in) { this.fixed = in;}


     /** True if  whether the source is fixed. */
     public boolean isFixed() { return fixed;}


     /** Sets the no comment .*/
     public void setPosition(Position in) { this.position = in;}


     /** Returns the no comment. */
     public Position getPosition() { return position;}


     // Descendant Mutators.

     
     // NP -> P Translator.

     public Source(NPSource npSource) {
          super(npSource);
          Iterator it;
          fixed = npSource.isFixed();
          try {
               NPPosition npPosition = npSource.getNPPosition();
               Class npClazz = npPosition.getClass();
               String npName = npClazz.getName();
               int k = npName.indexOf("nonpersist.NP");
               String pName = npName.substring(0,k).concat(npName.substring(k+13));
               Class pClazz = Class.forName(pName);
               Constructor pCon = pClazz.getConstructor(new Class[]{npClazz});
               position = (Position)pCon.newInstance(new Object[]{npPosition});
          } catch (ClassNotFoundException re1){
               System.out.println("Translation Error: "+re1);
          } catch (NoSuchMethodException re2) {
               System.out.println("Translation Error: "+re2);
          } catch (InvocationTargetException re3) {
               System.out.println("Translation Error: "+re3);
          } catch (IllegalAccessException re4) {
               System.out.println("Translation Error: "+re4);
          } catch (InstantiationException re5) {
               System.out.println("Translation Error: "+re5);
          }
          
          // Recursively call Daughter Translators.

     } // end (NP -> P Translator).
     
     // P -> NP Translator.

     public void stuff(NPSource npSource) {
          super.stuff(npSource);
          Iterator it;
          npSource.setFixed(isFixed());
          npSource.setNPPosition((NPPosition)(getPosition().makeNP()));
     } // end (P -> NP Translator).
     
     // P -> NP Translator.

     public NPDBObject makeNP() {
          NPSource npSource = new NPSource();
          stuff(npSource);
          return npSource;
     } // end (makeNp).


} // end class def [Source].
