package ngat.phase2;
import ngat.phase2.nonpersist.*;

import com.odi.*;
import com.odi.util.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class TelescopeConfig extends DBObject implements Serializable {

     // Variables.



    /**  time (millis) required to set up this config (..Simulation only). */
    protected float setupTime;
    
    /** text description. */
    protected String description;
    
    /**  determines size of focus offset (microns) (if any). */
    protected float focusOffset;
    
    /**  indicator of whether AG MUST be used -default:NOT. */
    protected int autoGuiderUsageMode;
  
    /**  flag to indicate mode of angle specification (either -default:SKY or MOUNT or VFLOAT). */
    protected int rotatorAngleMode;
       
    /**  angle offset of rotator in specified mode. */
    protected double skyAngle;

    /**  offset of probe position (arcminutes) -default:edge. */
    protected double guideProbePosition;
       
    /**  mode for guide star selection (-default:RANK  RANGE or PIXEL). */
    protected int autoGuiderStarSelectionMode;
    
    /**  param 1 of star selection model (rank or range start limit or pixels-X). */
    protected int autoGuiderStarSelection1;
    
    /**  param 2 of star selection model (range end limit or pixels-Y). */
    protected int autoGuiderStarSelection2;
    
    /**  indicator of whether the user can/has set the AG star selection mode. */
    protected boolean autoGuiderStarSelectionEnabled;
    
    // Constructor.
    
    public TelescopeConfig() {this("untitled");}
    
    public TelescopeConfig(String name) {
	super(name);
    }
    
    // Accessors.
    
    /** Sets the  time (millis) required to set up this config (..Simulation only) .*/
    public void setSetupTime(float in) { this.setupTime = in;}
    
    /** Returns the  time (millis) required to set up this config (..Simulation only). */
    public float getSetupTime() { return setupTime;}
    
    /** Sets the etx description.*/
    public void setDescription(String in) { this.description = in;}
    
    /** Returns the text description. */
    public String getDescription() { return description;}
    
    /** Sets the  determines size of focus offset (microns) (if any) .*/
    public void setFocusOffset(float in) { this.focusOffset = in;}
    
    /** Returns the  determines size of focus offset (microns) (if any). */
    public float getFocusOffset() { return focusOffset;}    
    
    /** Sets the  indicator of whether AG MUST be used -default:NOT .*/
    public void setAutoGuiderUsageMode(int in) { this.autoGuiderUsageMode = in;}

    /** Returns indicator of whether AG MUST be used -default:NOT. */
    public int getAutoGuiderUsageMode() { return autoGuiderUsageMode;}
    
    /** Sets the  flag to indicate mode of angle specification (either -default:SKY or MOUNT) .*/
    public void setRotatorAngleMode(int in) { this.rotatorAngleMode = in;}    
    
    /** Returns the  flag to indicate mode of angle specification (either -default:SKY or MOUNT). */
    public int getRotatorAngleMode() { return rotatorAngleMode;}
    
    /** Sets the  angle offset of rotator in specified mode .*/
    public void setSkyAngle(double in) { this.skyAngle = in;}   
    
    /** Returns the  angle offset of rotator in specified mode. */
    public double getSkyAngle() { return skyAngle;}    
    
    /** Sets the  offset of probe position (arcminutes) -default:edge .*/
    public void setGuideProbePosition(double in) { this.guideProbePosition = in;}
    
    /** Returns the  offset of probe position (arcminutes) -default:edge. */
    public double getGuideProbePosition() { return guideProbePosition;}
        
    /** Sets the  mode for guide star selection (-default:RANK  RANGE or PIXEL) .*/
    public void setAutoGuiderStarSelectionMode(int in) { this.autoGuiderStarSelectionMode = in;}
    
    /** Returns the  mode for guide star selection (-default:RANK  RANGE or PIXEL). */
    public int getAutoGuiderStarSelectionMode() { return autoGuiderStarSelectionMode;}
    
    /** Sets the  param 1 of star selection model (rank or range start limit or pixels-X) .*/
    public void setAutoGuiderStarSelection1(int in) { this.autoGuiderStarSelection1 = in;}    
    
    /** Returns the  param 1 of star selection model (rank or range start limit or pixels-X). */
    public int getAutoGuiderStarSelection1() { return autoGuiderStarSelection1;}
    
    /** Sets the  param 2 of star selection model (range end limit or pixels-Y) .*/
    public void setAutoGuiderStarSelection2(int in) { this.autoGuiderStarSelection2 = in;}
    
    /** Returns the  param 2 of star selection model (range end limit or pixels-Y). */
    public int getAutoGuiderStarSelection2() { return autoGuiderStarSelection2;}
    
    /** Sets the  indicator of whether the user can/has set the AG star selection mode .*/
    public void setAutoGuiderStarSelectionEnabled(boolean in) { this.autoGuiderStarSelectionEnabled = in;}
    
    /** True if  indicator of whether the user can/has set the AG star selection mode. */
    public boolean isAutoGuiderStarSelectionEnabled() { return autoGuiderStarSelectionEnabled;}
    
    public double getReconfigurationTime(TelescopeConfig other) { return 5.0;}
    
     // Descendant Mutators.
    
    // NP -> P Translator.
    public TelescopeConfig(NPTelescopeConfig npTelescopeConfig) {
	super(npTelescopeConfig);
	Iterator it;
	setupTime = npTelescopeConfig.getSetupTime();
	description = npTelescopeConfig.getDescription();
	focusOffset = npTelescopeConfig.getFocusOffset();
	autoGuiderUsageMode = npTelescopeConfig.getAutoGuiderUsageMode();
	rotatorAngleMode = npTelescopeConfig.getRotatorAngleMode();
	skyAngle = npTelescopeConfig.getSkyAngle();
	guideProbePosition = npTelescopeConfig.getGuideProbePosition();
	autoGuiderStarSelectionMode = npTelescopeConfig.getAutoGuiderStarSelectionMode();
	autoGuiderStarSelection1 = npTelescopeConfig.getAutoGuiderStarSelection1();
	autoGuiderStarSelection2 = npTelescopeConfig.getAutoGuiderStarSelection2();
	autoGuiderStarSelectionEnabled = npTelescopeConfig.isAutoGuiderStarSelectionEnabled();	
	// Recursively call Daughter Translators.
	
    } // end (NP -> P Translator).
     
    // P -> NP Translator.
    public void stuff(NPTelescopeConfig npTelescopeConfig) {
	super.stuff(npTelescopeConfig);
          Iterator it;
          npTelescopeConfig.setSetupTime(getSetupTime());
	  npTelescopeConfig.setDescription(getDescription());
          npTelescopeConfig.setFocusOffset(getFocusOffset());
          npTelescopeConfig.setAutoGuiderUsageMode(getAutoGuiderUsageMode());
          npTelescopeConfig.setRotatorAngleMode(getRotatorAngleMode());
          npTelescopeConfig.setSkyAngle(getSkyAngle());
          npTelescopeConfig.setGuideProbePosition(getGuideProbePosition());
          npTelescopeConfig.setAutoGuiderStarSelectionMode(getAutoGuiderStarSelectionMode());
          npTelescopeConfig.setAutoGuiderStarSelection1(getAutoGuiderStarSelection1());
          npTelescopeConfig.setAutoGuiderStarSelection2(getAutoGuiderStarSelection2());
          npTelescopeConfig.setAutoGuiderStarSelectionEnabled(isAutoGuiderStarSelectionEnabled());
    } // end (P -> NP Translator).
    
    // P -> NP Translator.
    public NPDBObject makeNP() {
	NPTelescopeConfig npTelescopeConfig = new NPTelescopeConfig();
	stuff(npTelescopeConfig);
	return npTelescopeConfig;
    } // end (makeNp).
    
} // end class def [TelescopeConfig].
