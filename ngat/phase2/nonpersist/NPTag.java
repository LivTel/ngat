package ngat.phase2.nonpersist;

import ngat.phase2.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class NPTag extends NPDBObject implements Serializable, Cloneable{

     // Variables.

    public static final int BRIGHT = 0;

    public static final int DARK   = 1;

    public static final int EXCELLENT = 0;

    public static final int AVERAGE   = 1;
    
    public static final int POOR      = 2;


    protected float[][] achievedTime;
    
    protected float[][] targetFraction;
       
    /**  total time allocated to this TAG (hours). */
    protected float totalAchievedTime;
    
    /**  total time allocated to this TAG (hours). */
    protected float totalAllocatedTime;
    
    protected HashMap npUsers;

     // Constructor.

     public NPTag() {this("untitled");}

     public NPTag(String name) {
          super(name);
          npUsers = new HashMap();
	  achievedTime   = new float[2][3];
	  targetFraction = new float[2][3];
     }

     // Accessors.


    /** Sets the time fraction actually achieved under BrightSky/ExcellentSeeing conditions .*/
    public void setAchievedTime(int lunar, int seeing, float in) { this.achievedTime[lunar][seeing] = in;}    
    
    /** Returns the time fraction actually achieved under BrightSky/ExcellentSeeing conditions. */
    public float getAchievedTime(int lunar, int seeing) { return achievedTime[lunar][seeing];}
          
    /** Sets the  total time allocated to this TAG (hours) .*/
    public void setTotalAchievedTime(float in) { this.totalAchievedTime = in;}
    
    /** Returns the  total time allocated to this TAG (hours). */
    public float getTotalAchievedTime() { return totalAchievedTime;}
    
    
    /** Sets the time fraction allocated to BrightSky/ExcellentSeeing conditions .*/
    public void setTargetFraction(int lunar, int seeing, float in) { this.targetFraction[lunar][seeing] = in;}
    
    /** Returns the time fraction allocated to BrightSky/ExcellentSeeing conditions. */
    public float getTargetFraction(int lunar, int seeing) { return targetFraction[lunar][seeing]; }        
    
    /** Sets the  total time allocated to this TAG (hours) .*/
    public void setTotalAllocatedTime(float in) { this.totalAllocatedTime = in;}
    
    /** Returns the  total time allocated to this TAG (hours). */
    public float getTotalAllocatedTime() { return totalAllocatedTime;}


     // Descendant Mutators.


     // NPUser Methods.

     public void addNPUser(NPUser npUser) {
          npUsers.put(npUser.getName(), npUser);
          npUser.setPath(getPath() + "/" + getName());
     }

     public void deleteNPUser(NPUser npUser) {
          npUsers.remove(npUser.getName());
     }

     public void removeAllNPUsers() {
          npUsers.clear();
     }

     public Iterator listAllNPUsers() {
          return npUsers.values().iterator();
     }

     public NPUser findNPUser(String name) {
          if (npUsers.containsKey(name)) return ((NPUser)npUsers.get(name));
          return null;
     }

     public HashMap getNPUsers() { return npUsers;}
     
    /** Formatted Text Output.*/
    public void write(PrintStream out, int level) {
	super.write(out, level);
	Iterator it;
	out.println(tab(level)+"achievedTime[BRIGHT][EXCELLENT]: ["+achievedTime[BRIGHT][EXCELLENT]+"]");
	out.println(tab(level)+"achievedTime[BRIGHT][AVERAGE]: ["+achievedTime[BRIGHT][AVERAGE]+"]");
	out.println(tab(level)+"achievedTime[BRIGHT][POOR]: ["+achievedTime[BRIGHT][POOR]+"]");
	out.println(tab(level)+"achievedTime[DARK][EXCELLENT]: ["+achievedTime[DARK][EXCELLENT]+"]");
	out.println(tab(level)+"achievedTime[DARK][AVERAGE]: ["+achievedTime[DARK][AVERAGE]+"]");
	out.println(tab(level)+"achievedTime[DARK][POOR]: ["+achievedTime[DARK][POOR]+"]");
	
	out.println(tab(level)+"totalAchievedTime: ["+totalAchievedTime+"]");
	
	out.println(tab(level)+"targetFraction[BRIGHT][EXCELLENT]: ["+targetFraction[BRIGHT][EXCELLENT]+"]");
	out.println(tab(level)+"targetFraction[BRIGHT][AVERAGE]: ["+targetFraction[BRIGHT][AVERAGE]+"]");
	out.println(tab(level)+"targetFraction[BRIGHT][POOR]: ["+targetFraction[BRIGHT][POOR]+"]");
	out.println(tab(level)+"targetFraction[DARK][EXCELLENT]: ["+targetFraction[DARK][EXCELLENT]+"]");
	out.println(tab(level)+"targetFraction[DARK][AVERAGE]: ["+targetFraction[DARK][AVERAGE]+"]");
	out.println(tab(level)+"targetFraction[DARK][POOR]: ["+targetFraction[DARK][POOR]+"]");
	
	out.println(tab(level)+"totalAllocatedTime: ["+totalAllocatedTime+"]");
	it = listAllNPUsers();
	while (it.hasNext()) {
	    ((NPUser)it.next()).write(out,level+1);
	}
    } // end (write).

    public void writeXml(PrintStream out, int level) {
	super.writeXml(out, level);
	
	out.println(tab(level+1)+"<targetFraction lunar = 'BRIGHT' seeing = 'EXCELLENT'>"+
		    targetFraction [BRIGHT][EXCELLENT]+"</targetFraction>");
	out.println(tab(level+1)+"<targetFraction lunar = 'BRIGHT' seeing = 'AVERAGE'>"+
		    targetFraction [BRIGHT][AVERAGE]+"</targetFraction>");
	out.println(tab(level+1)+"<targetFraction lunar = 'BRIGHT' seeing = 'POOR'>"+
		    targetFraction [BRIGHT][POOR]+"</targetFraction>");
	out.println(tab(level+1)+"targetFraction lunar = 'DARK' seeing = 'EXCELLENT'>"+
		    targetFraction [DARK][EXCELLENT]+"</targetFraction>");
	out.println(tab(level+1)+"<targetFraction lunar = 'DARK' seeing = 'AVERAGE'>"+
		    targetFraction [DARK][AVERAGE]+"</targetFraction>");
	out.println(tab(level+1)+"<targetFraction lunar = 'DARK' seeing = 'POOR'>"+
		    targetFraction [DARK][POOR]+"</targetFraction>");	
	
	out.println(tab(level+1)+"<totalAllocatedTime>"+totalAllocatedTime+"</totalAllocatedTime>");
	
	out.println(tab(level)+"</Tag>");
    } // end (write).

    /** NPClone Constructor.*/
    public NPDBObject copy() {
	try {
	    return (NPTag)clone();
	} catch (CloneNotSupportedException ce) {return null;}
    } // end (copy).


} // end class def [Tag].
