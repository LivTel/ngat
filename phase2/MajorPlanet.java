package ngat.phase2;

import ngat.astrometry.*;
import ngat.phase2.nonpersist.*;

import jyd.storable.*;
import jyd.collection.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class MajorPlanet extends SolarSystemSource implements Serializable {

    /** Serial version UID - used to maintain serialization compatibility
     * across modifications of the class's structure.*/
    private static final long serialVersionUID = 6975778993654029445L;
    

    // Variables.
    
    /** Epoch at which the elements are/were measured (mjd).*/
    protected double elementEpoch;
    
    /** Longitude of the ascending node (rads). */
    protected double longAscNode;
    
    /** Inclination of the orbit to ecliptic (rads). */
    protected double orbitalInc;
    
    /** Eccentricity of orbit ( =1, circle, <1, >1,  ). */
    protected double eccentricity;
    
    /** Mean distance (orbital radius), (au). */
    protected double meanDistance;
    
    /** Daily rate of motion in orbit (rad/day). */
    protected double dailyMotion;
    
    /** Longitude of perihelion (rads). */
    protected double longPeri;
    
    /** Mean longitude (rads). */
    protected double meanLongitude;
    
    // Constructor.
    
    public MajorPlanet() {super();}
    
    public MajorPlanet(String name) {
	super(name);
    }
    
    // Accessors.
    public double getElementEpoch() {  return elementEpoch;}
    public double getLongAscNode() {  return longAscNode;}
    
    public double getOrbitalInc() {  return orbitalInc;}
    public double getEccentricity() {  return eccentricity;}
   
    public double getMeanDistance() {  return meanDistance;}
    public double getDailyMotion() {  return dailyMotion;}
    public double getLongPeri() {  return longPeri;}
    public double getMeanLongitude() {  return meanLongitude;}
    
    // Mutators
    public void setElementEpoch(double in) {  elementEpoch = in;}
    public void setLongAscNode(double in) {  longAscNode = in;}
    
    public void setOrbitalInc(double in) {   orbitalInc = in;}
    public void setEccentricity(double in) {  eccentricity = in;}
    
    public void setMeanDistance(double in) {   meanDistance = in;}
    public void setDailyMotion(double in) {   dailyMotion = in;}
    public void setLongPeri(double in) {   longPeri = in;}
    public void setMeanLongitude(double in) {   meanLongitude = in;}

    /** Returns the source's current position. This is calculated using
     * the orbital elements and obtained via ngat.astrometry.Astrometry*/
    public Position getPosition() {  
		
	Position position = Astrometry.getPlanetPosition(this);
	return position;
    }

    /** Returns the current Non-sidereal tracking in RA.*/
    public double getNsTrackRA() {  return 0.0;}
    
    /** Returns the current Non-sidereal tracking in dec.*/
    public double getNsTrackDec() {  return 0.0;} 

    // Clone Constructor.   
    public NPDBObject copy() {
	try {
	    return (MajorPlanet)clone();
	} catch (CloneNotSupportedException ce) {return null;}
    } // end (copy).
   
    /** Returns readable description. ##TBD##*/
    public String toString() {
	return "MajorPlanet: "+name+
	    " : Epoch "+elementEpoch+" ..ns tracking is not currently available";
    }
    
    // Formatted Text Output.   
    public void writeXml(PrintStream out, int level) {
	out.println(tab(level)+"<majorPlanet name = '"+name+"'>");
	out.println(tab(level+1)+"<elementEpoch>" +elementEpoch+"</elementEpoch>");
	out.println(tab(level+1)+"<longAscNode>"  +Position.toDegrees(longAscNode,3)+"</longAscNode>");
	out.println(tab(level+1)+"<inclination>"  +Position.toDegrees(orbitalInc,3)+"</inclination>");
	out.println(tab(level+1)+"<eccenticity>"  +eccentricity+"</eccenticity>");
	out.println(tab(level+1)+"<meanDistance>" +meanDistance+"</meanDistance>");
	out.println(tab(level+1)+"<dailyMotion>"  +dailyMotion+"</dailyMotion>");
	out.println(tab(level+1)+"<longPeri>"     +Position.toDegrees(longPeri,3)+"</longPeri>");
	out.println(tab(level+1)+"<meanLongitude>"+Position.toDegrees(meanLongitude,3)+"</meanLongitude>");
	out.println(tab(level)+"</majorPlanet>");
    } // end (write).
    
   
} // end class def [MajorPlanet].
