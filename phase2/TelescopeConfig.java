package ngat.phase2;
import ngat.phase2.nonpersist.*;

import jyd.storable.*;
import jyd.collection.*;
import java.lang.reflect.*;
import java.util.*;
import java.io.*;


// Generated by O3J 


public class TelescopeConfig extends NPDBObject implements Serializable {
 
    /** Serial version UID - used to maintain serialization compatibility
     * across modifications of the class's structure.*/    
    private static final long serialVersionUID = 7134913542512442064L;

    // Constants.

    public static final int AGMODE_NEVER     = 0;
    
    public static final int AGMODE_OPTIONAL  = 1;
    
    public static final int AGMODE_MANDATORY = 2;
    

    public static final int ROTATOR_MODE_SKY      = 0;
    
    public static final int ROTATOR_MODE_MOUNT    = 1;
    
    public static final int ROTATOR_MODE_VERTICAL = 2;

    public static final int ROTATOR_MODE_FLOAT    = 3;
    
    public static final int ROTATOR_MODE_VFLOAT   = 4;
   
    
    public static final int STAR_SELECTION_RANK  = 0;
    
    public static final int STAR_SELECTION_RANGE = 1;
    
    public static final int STAR_SELECTION_PIXEL = 2;

   
    public static final int ACQUIRE_MODE_NONE      = 0;

    public static final int ACQUIRE_MODE_BRIGHTEST = 1;

    public static final int ACQUIRE_MODE_WCS       = 2;
    

    // Variables.

    /**  time (millis) required to set up this config (..Simulation only). */
    protected float setupTime;
    
    /** text description. */
    protected String description;
    
    /**  determines size of focus offset (microns) (if any). */
    protected float focusOffset;
    
    /**  indicator of whether AG MUST be used -default:NOT. */
    protected int autoGuiderUsageMode;
  
    /**  flag to indicate mode of angle specification (either -default:SKY or MOUNT or VFLOAT). */
    protected int rotatorAngleMode;
       
    /**  angle offset of rotator in specified mode. */
    protected double skyAngle;

    /**  offset of probe position (millis) -default:edge = 0.0. */
    protected double guideProbePosition;
       
    /**  mode for guide star selection (-default:RANK  RANGE or PIXEL). */
    protected int autoGuiderStarSelectionMode;
    
    /**  param 1 of star selection model (rank or range start limit or pixels-X). */
    protected int autoGuiderStarSelection1;
    
    /**  param 2 of star selection model (range end limit or pixels-Y). */
    protected int autoGuiderStarSelection2;
    
    /**  indicator of whether the user can/has set the AG star selection mode. */
    protected boolean autoGuiderStarSelectionEnabled;
    
    /** True if the rotator should be set to vertical (zenith).*/
    protected boolean useParallacticAngle;

    // Constructor.
    
    public TelescopeConfig() {this("untitled");}
    
    public TelescopeConfig(String name) {
	super(name);
    }
    
    // Accessors.
    
    /** Sets the  time (millis) required to set up this config (..Simulation only) .*/
    public void setSetupTime(float in) {  this.setupTime = in;}
    
    /** Returns the  time (millis) required to set up this config (..Simulation only). */
    public float getSetupTime() {  return setupTime;}
    
    /** Sets the etx description.*/
    public void setDescription(String in) {  this.description = in;}
    
    /** Returns the text description. */
    public String getDescription() { return description;}
    
    /** Sets the  determines size of focus offset (microns) (if any) .*/
    public void setFocusOffset(float in) {  this.focusOffset = in;}
    
    /** Returns the  determines size of focus offset (microns) (if any). */
    public float getFocusOffset() { return focusOffset;}    
    
    /** Sets the  indicator of whether AG MUST be used -default:NOT .*/
    public void setAutoGuiderUsageMode(int in) {  this.autoGuiderUsageMode = in;}

    /** Returns indicator of whether AG MUST be used -default:NOT. */
    public int getAutoGuiderUsageMode() { return autoGuiderUsageMode;}
    
    /** Sets the  flag to indicate mode of angle specification (either -default:SKY or MOUNT) .*/
    public void setRotatorAngleMode(int in) {  this.rotatorAngleMode = in;}    
    
    /** Returns the  flag to indicate mode of angle specification (either -default:SKY or MOUNT). */
    public int getRotatorAngleMode() { return rotatorAngleMode;}
    
    /** Sets the  angle offset of rotator in specified mode .*/
    public void setSkyAngle(double in) {  this.skyAngle = in;}   
    
    /** Returns the  angle offset of rotator in specified mode. */
    public double getSkyAngle() { return skyAngle;}    
    
    /** Sets the  offset of probe position (millis) -default:edge .*/
    public void setGuideProbePosition(double in) {  this.guideProbePosition = in;}
    
    /** Returns the  offset of probe position (millis) -default:edge. */
    public double getGuideProbePosition() { return guideProbePosition;}
        
    /** Sets the  mode for guide star selection (-default:RANK  RANGE or PIXEL) .*/
    public void setAutoGuiderStarSelectionMode(int in) {  this.autoGuiderStarSelectionMode = in;}
    
    /** Returns the  mode for guide star selection (-default:RANK  RANGE or PIXEL). */
    public int getAutoGuiderStarSelectionMode() { return autoGuiderStarSelectionMode;}
    
    /** Sets the  param 1 of star selection model (rank or range start limit or pixels-X) .*/
    public void setAutoGuiderStarSelection1(int in) {  this.autoGuiderStarSelection1 = in;}    
    
    /** Returns the  param 1 of star selection model (rank or range start limit or pixels-X). */
    public int getAutoGuiderStarSelection1() { return autoGuiderStarSelection1;}
    
    /** Sets the  param 2 of star selection model (range end limit or pixels-Y) .*/
    public void setAutoGuiderStarSelection2(int in) {  this.autoGuiderStarSelection2 = in;}
    
    /** Returns the  param 2 of star selection model (range end limit or pixels-Y). */
    public int getAutoGuiderStarSelection2() { return autoGuiderStarSelection2;}
    
    /** Sets the  indicator of whether the user can/has set the AG star selection mode .*/
    public void setAutoGuiderStarSelectionEnabled(boolean in) {  this.autoGuiderStarSelectionEnabled = in;}
    
    /** True if  indicator of whether the user can/has set the AG star selection mode. */
    public boolean isAutoGuiderStarSelectionEnabled() { return autoGuiderStarSelectionEnabled;}

    /** Sets to True if the rotator should be set to vertical (zenith).*/
    public void setUseParallacticAngle(boolean in) {  this.useParallacticAngle = in; }

    /** Returns true if the rotator should be set to vertical (zenith).*/
    public boolean getUseParallacticAngle() { return useParallacticAngle; }


    public double getReconfigurationTime(TelescopeConfig other) { return 5.0;}
     
    /** Return a standard TelescopeConfig.*/
    public static TelescopeConfig getDefault() {
	TelescopeConfig DEFAULT = new TelescopeConfig("DEFAULT");
	DEFAULT.setDescription("Default TelescopeConfig");
	DEFAULT.setFocusOffset(0.0f);
	DEFAULT.setAutoGuiderUsageMode(AGMODE_OPTIONAL);
	DEFAULT.setAutoGuiderStarSelectionMode(STAR_SELECTION_RANK);
	DEFAULT.setAutoGuiderStarSelectionEnabled(true);
	DEFAULT.setAutoGuiderStarSelection1(0);
	DEFAULT.setAutoGuiderStarSelection1(0);
	DEFAULT.setRotatorAngleMode(ROTATOR_MODE_SKY);
	DEFAULT.setSkyAngle(0.0);
	DEFAULT.setUseParallacticAngle(false);
	DEFAULT.setGuideProbePosition(0.0);
	return DEFAULT;
    }

    public String toString() { 
	String strAgMode = null;
	switch (autoGuiderUsageMode) {
	case AGMODE_NEVER:
	    strAgMode = "NEVER" ;  
	    break;
	case AGMODE_OPTIONAL:
	    strAgMode = "OPT"; 
	    break;
	case AGMODE_MANDATORY:
	    strAgMode = "MAND"; 
	    break;
	}
	
	String strRotMode = null;
	switch (rotatorAngleMode) {
	case ROTATOR_MODE_SKY: 	    
	    strRotMode = "SKY "+skyAngle;
	    break;
	case ROTATOR_MODE_MOUNT:
	    strRotMode = "MOUNT "+skyAngle; 
	    break;
	}
	if (useParallacticAngle)
	    strRotMode = "VERTICAL";
	
	String strStarMode = null;
	switch (autoGuiderStarSelectionMode) {
	case STAR_SELECTION_RANK:
	    strStarMode = "RANK "+autoGuiderStarSelection1+"th  brightest";
	    break;
	case STAR_SELECTION_RANGE:
	    strStarMode = "RANGE "+autoGuiderStarSelection1+" - "+autoGuiderStarSelection2+ "(mag)"; 
	    break;
	case STAR_SELECTION_PIXEL:
	    strStarMode = "PIXEL @ ("+autoGuiderStarSelection1+", "+autoGuiderStarSelection2+")";
	    break;
	}
	
	return "TelescopeConfig: "+name+
	    " : AG is "+strAgMode+
	    ", Rot "+strRotMode+
	    ", Select "+strStarMode+
	    ", FOff "+focusOffset+
	    ", Probe "+guideProbePosition;
	
	// TelescopeConfig: TC1 : AG is OPT, Rot SKY 10.0, Select PIXEL @ (120, 234), FOff 0.2, Probe 110.0

    }
   
    
 public static String toAquireModeString(int mode) { 
	switch (mode) {
	case ACQUIRE_MODE_NONE:
	    return "NO_ACQUIRE" ;  
	case ACQUIRE_MODE_BRIGHTEST:
	    return "ACQUIRE_BRIGHTEST"; 	  
	case ACQUIRE_MODE_WCS:
	    return "ACQUIRE_WCS"; 
	}
	return "UNKNOWN";
    }

    public static String toAgModeString(int mode) { 
	switch (mode) {
	case AGMODE_NEVER:
	    return "AG_NEVER" ;  
	case AGMODE_OPTIONAL:
	    return "AG_OPT"; 	  
	case AGMODE_MANDATORY:
	    return "AG_MAND"; 
	}
	return "UNKNOWN";
    }

    public static String toRotatorModeString(int mode) {
	switch (mode) {
	case ROTATOR_MODE_SKY: 	    
	    return "SKY";
	case ROTATOR_MODE_MOUNT:
	    return "MOUNT"; 
	case ROTATOR_MODE_VERTICAL:
	    return "VERTICAL";
	case ROTATOR_MODE_FLOAT:
	    return "FLOAT";
	case ROTATOR_MODE_VFLOAT:
	    return "VFLOAT";
	}
	return "UNKNOWN";
    }




    // Formatted Text Output.
    public void writeXml(PrintStream out, int level) {
          super.writeXml(out, level);

	  String strAgMode = null;
	  switch (autoGuiderUsageMode) {
	  case AGMODE_NEVER:
	      strAgMode = "NO" ;  
	      break;
	  case AGMODE_OPTIONAL:
	      strAgMode = "OPT"; 
	      break;
	  case AGMODE_MANDATORY:
	      strAgMode = "MAND"; 
	      break;
	  }
	  
	  String strRotMode = null;
	  switch (rotatorAngleMode) {
	  case ROTATOR_MODE_SKY: 	    
	      strRotMode = "SKY "+skyAngle;
	      break;
	  case ROTATOR_MODE_MOUNT:
	      strRotMode = "MOUNT "+skyAngle; 
	      break;
	  }
	  if (useParallacticAngle)
	      strRotMode = "VERTICAL";
	  
	  String strStarMode = null;
	  switch (autoGuiderStarSelectionMode) {
	  case STAR_SELECTION_RANK:
	      strStarMode = "RANK "+autoGuiderStarSelection1+"th  brightest";
	      break;
	  case STAR_SELECTION_RANGE:
	      strStarMode = "RANGE "+autoGuiderStarSelection1+" - "+autoGuiderStarSelection2+ "(mag)"; 
	      break;
	  case STAR_SELECTION_PIXEL:
	      strStarMode = "PIXEL @ ("+autoGuiderStarSelection1+", "+autoGuiderStarSelection2+")";
	      break;
	  }
	
	  
          out.println(tab(level+1)+"<setupTime>"+setupTime+"</setupTime>");
	  out.println(tab(level+1)+"<description>"+description+"</description>");
          out.println(tab(level+1)+"<focusOffset>"+focusOffset+"</focusOffset>");
          out.println(tab(level+1)+"<autoGuideUsageModer>"+strAgMode+"</autoGuideUsageModer>");
          out.println(tab(level+1)+"<rotatorAngleMode>"+strRotMode+"</rotatorAngleMode>");
          out.println(tab(level+1)+"<skyAngle>"+skyAngle+"</skyAngle>");
          out.println(tab(level+1)+"<guideProbePosition>"+guideProbePosition+"</guideProbePosition>");
          out.println(tab(level+1)+"<autoGuiderStarSelectionMode>"+strStarMode+
		      "</autoGuiderStarSelectionMode>");
          out.println(tab(level+1)+"<autoGuiderStarSelection1>"+autoGuiderStarSelection1+
		      "</autoGuiderStarSelection1>");
          out.println(tab(level+1)+"<autoGuiderStarSelection2>"+autoGuiderStarSelection2+
		      "</autoGuiderStarSelection2>");
          out.println(tab(level+1)+"<autoGuiderStarSelectionEnabled>"+
		      autoGuiderStarSelectionEnabled+"</autoGuiderStarSelectionEnabled>");
	  out.println(tab(level+1)+"<useParallacticAngle>"+
		      useParallacticAngle+"</useParallacticAngle>");
	  out.println(tab(level)+"</TelescopeConfig>");
    } // end (write).
    
    // Clone Constructor.    
    public NPDBObject copy() {
	try {
	    return (TelescopeConfig)clone();
	} catch (CloneNotSupportedException ce) {return null;}
    } // end (copy).

} // end class def [TelescopeConfig].

